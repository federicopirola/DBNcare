SBP_0.prob <- array(c(0.70, 0.20, 0.10), dim = c(3), dimnames = list(SBP_0 = c("Normal", "Elevated", "Hypertensive")))
LDL_0.prob <- array(c(0.60, 0.30, 0.10), dim = c(3), dimnames = list(LDL_0 = c("Optimal", "Near Optimal", "High")))
HDL_0.prob <- array(c(0.70, 0.30), dim = c(2), dimnames = list(HDL_0 = c("Normal", "Low")))
TRIG_0.prob <- array(c(0.80, 0.20), dim = c(2), dimnames = list(TRIG_0 = c("Normal", "High")))
#Treatment_0.prob <- array(c(0.50, 0.50), dim = c(2), dimnames = list(Treatment_0 = c("Yes", "No")))
CPT_list <- list(
BMI_t = BMI.prob,
WHR_t = WHR.prob,
SBP_t = SBP.prob,
LDL_t = LDL.prob,
HDL_t = HDL.prob,
TRIG_t = TRIG.prob,
HbA1c_t = HbA1c.prob,
Nephropathy_t = Nephropathy.prob,
CVD_t = CVD.prob,
Treatment_t = Treatment.prob,
WHR_0 = WHR_0.prob,
HDL_0 = HDL_0.prob,
CVD_0 = CVD_0.prob,
BMI_0 = BMI_0.prob,
SBP_0 = SBP_0.prob,
LDL_0 = LDL_0.prob,
TRIG_0 = TRIG_0.prob,
HbA1c_0 = HbA1c_0.prob,
Nephropathy_0 = Nephropathy_0.prob,
Treatment_0 = Treatment_0.prob
)
library(DynamicBayesianNetwork)
diabetes_management_dbn<-empty_DBN(dynamic_nodes = variables <- c(
"HDL",         # High-Density Lipoprotein Cholesterol
"LDL",         # Low-Density Lipoprotein Cholesterol
"TRIG",        # Triglycerides
"SBP",         # Systolic Blood Pressure
"BMI",         # Body Mass Index
"WHR",         # Waist-Hip Ratio
"HbA1c",       # Glycated Hemoglobin
"Nephropathy", # Kidney Disease Progression
"CVD",         # Cardiovascular Disease Status
"Treatment"    # Whether a patient is receiving treatment
), markov_order = 1)
arcs_list <- c(
"BMI(t-1)", "BMI(t)",
"BMI(t-1)", "SBP(t)",
"CVD(t-1)", "CVD(t)",
"HDL(t-1)", "HDL(t)",
"HDL(t-1)", "LDL(t)",
"HDL(t-1)", "TRIG(t)",
"HDL(t)", "CVD(t)",
"HbA1c(t-1)", "HbA1c(t)",
"HbA1c(t)", "Nephropathy(t)",
"LDL(t-1)", "LDL(t)",
"LDL(t-1)", "HDL(t)",
"LDL(t)", "CVD(t)",
"Nephropathy(t-1)", "Nephropathy(t)",
"SBP(t-1)", "SBP(t)",
"SBP(t)", "CVD(t)",
"TRIG(t-1)", "TRIG(t)",
"TRIG(t-1)", "HDL(t)",
"TRIG(t)", "CVD(t)",
"Treatment(t-1)", "HbA1c(t)",
"Treatment(t)", "Nephropathy(t)",
"WHR(t-1)", "WHR(t)",
"WHR(t-1)", "BMI(t)",
"WHR(t-1)", "HDL(t)",
"WHR(t-1)", "TRIG(t)",
"HDL(0)", "CVD(0)",
"HbA1c(0)", "Nephropathy(0)",
"LDL(0)", "CVD(0)",
"SBP(0)", "CVD(0)",
"TRIG(0)", "CVD(0)",
"Treatment(0)", "Nephropathy(0)"
)
# Convert the list into a matrix with 2 columns ("From" and "To")
arcs_matrix <- matrix(arcs_list, ncol = 2, byrow = TRUE)
colnames(arcs_matrix) <- c("From", "To")
# Initialize the DBN object (assuming it's already created)
parse_arc <- function(arc) {
parts <- strsplit(arc, "\\(|\\)")[[1]]
return(c(parts[1], ifelse(parts[2] == "0", "t_0", parts[2])))
}
# Add each arc to the DBN
for (i in 1:nrow(arcs_matrix)) {
from <- parse_arc(arcs_matrix[i, "From"])
to <- parse_arc(arcs_matrix[i, "To"])
diabetes_management_dbn <- add_arc_DBN(
DBN = diabetes_management_dbn,
from = from,  # c(variable name, time format)
to = to       # c(variable name, time format)
)
}
# Print the arcs matrix to verify
print(arcs_matrix)
fitted_diabetes_management_dbn <- DBN_parameters(diabetes_management_dbn, CPT_list)
plot_g0(diabetes_management_dbn)
library(DynamicBayesianNetwork)
library(zeallot)
#Empty DBN initialization
diabetes_management_dbn<-empty_DBN(dynamic_nodes = variables <- c(
"HDL",         # High-Density Lipoprotein Cholesterol
"LDL",         # Low-Density Lipoprotein Cholesterol
"TRIG",        # Triglycerides
"SBP",         # Systolic Blood Pressure
"BMI",         # Body Mass Index
"WHR",         # Waist-Hip Ratio
"HbA1c",       # Glycated Hemoglobin
"Nephropathy", # Kidney Disease Progression
"CVD",         # Cardiovascular Disease Status
"Treatment"    # Whether a patient is receiving treatment
), markov_order = 1)
library(zeallot)
library(bnlearn)
library(DynamicBayesianNetwork)
# Define the table as a 24x2 matrix
EI_DBN_matrix <- matrix(
c(
"BMI(t-1)", "BMI(t)",
"BMI(t-1)", "SBP(t)",
"CVD(t-1)", "CVD(t)",
"HDL(t-1)", "HDL(t)",
"HDL(t-1)", "LDL(t)",
"HDL(t-1)", "TRIG(t)",
"HDL(t)", "CVD(t)",
"HbA1c(t-1)", "HbA1c(t)",
"HbA1c(t)", "Nephropathy(t)",
"LDL(t-1)", "LDL(t)",
"LDL(t-1)", "HDL(t)",
"LDL(t)", "CVD(t)",
"Nephropathy(t-1)", "Nephropathy(t)",
"SBP(t-1)", "SBP(t)",
"SBP(t)", "CVD(t)",
"TRIG(t-1)", "TRIG(t)",
"TRIG(t-1)", "HDL(t)",
"TRIG(t)", "CVD(t)",
"Treatment(t-1)", "HbA1c(t)",
"Treatment(t)", "Nephropathy(t)",
"WHR(t-1)", "WHR(t)",
"WHR(t-1)", "BMI(t)",
"WHR(t-1)", "HDL(t)",
"WHR(t-1)", "TRIG(t)",
"HDL(0)", "CVD(0)",
"HbA1c(0)", "Nephropathy(0)",
"LDL(0)", "CVD(0)",
"SBP(0)", "CVD(0)",
"TRIG(0)", "CVD(0)",
"Treatment(0)", "Nephropathy(0)"
),
ncol = 2,
byrow = TRUE
)
# Assign column names
colnames(EI_DBN_matrix) <- c("From", "To")
# Print the matrix
EI_DBN_matrix
#Empty DBN initialization
diabetes_management_dbn<-empty_DBN(dynamic_nodes = variables <- c(
"HDL",         # High-Density Lipoprotein Cholesterol
"LDL",         # Low-Density Lipoprotein Cholesterol
"TRIG",        # Triglycerides
"SBP",         # Systolic Blood Pressure
"BMI",         # Body Mass Index
"WHR",         # Waist-Hip Ratio
"HbA1c",       # Glycated Hemoglobin
"Nephropathy", # Kidney Disease Progression
"CVD",         # Cardiovascular Disease Status
"Treatment"    # Whether a patient is receiving treatment
), markov_order = 1)
#Edges list
arcs_list <- c(
"BMI(t-1)", "BMI(t)",
"BMI(t-1)", "SBP(t)",
"CVD(t-1)", "CVD(t)",
"HDL(t-1)", "HDL(t)",
"HDL(t-1)", "LDL(t)",
"HDL(t-1)", "TRIG(t)",
"HDL(t)", "CVD(t)",
"HbA1c(t-1)", "HbA1c(t)",
"HbA1c(t)", "Nephropathy(t)",
"LDL(t-1)", "LDL(t)",
"LDL(t-1)", "HDL(t)",
"LDL(t)", "CVD(t)",
"Nephropathy(t-1)", "Nephropathy(t)",
"SBP(t-1)", "SBP(t)",
"SBP(t)", "CVD(t)",
"TRIG(t-1)", "TRIG(t)",
"TRIG(t-1)", "HDL(t)",
"TRIG(t)", "CVD(t)",
"Treatment(t-1)", "HbA1c(t)",
"Treatment(t)", "Nephropathy(t)",
"WHR(t-1)", "WHR(t)",
"WHR(t-1)", "BMI(t)",
"WHR(t-1)", "HDL(t)",
"WHR(t-1)", "TRIG(t)",
"HDL(0)", "CVD(0)",
"HbA1c(0)", "Nephropathy(0)",
"LDL(0)", "CVD(0)",
"SBP(0)", "CVD(0)",
"TRIG(0)", "CVD(0)",
"Treatment(0)", "Nephropathy(0)"
)
# Convert the list into a matrix with 2 columns ("From" and "To")
arcs_matrix <- matrix(arcs_list, ncol = 2, byrow = TRUE)
colnames(arcs_matrix) <- c("From", "To")
# Initialize the DBN object (assuming it's already created)
parse_arc <- function(arc) {
parts <- strsplit(arc, "\\(|\\)")[[1]]
return(c(parts[1], ifelse(parts[2] == "0", "t_0", parts[2])))
}
# Add each arc to the DBN
for (i in 1:nrow(arcs_matrix)) {
from <- parse_arc(arcs_matrix[i, "From"])
to <- parse_arc(arcs_matrix[i, "To"])
diabetes_management_dbn <- add_arc_DBN(
DBN = diabetes_management_dbn,
from = from,  # c(variable name, time format)
to = to       # c(variable name, time format)
)
}
# Print the arcs matrix to verify
print(arcs_matrix)
library(zeallot)
library(bnlearn)
library(DynamicBayesianNetwork)
#Edges list
arcs_list <- c(
"BMI(t-1)", "BMI(t)",
"BMI(t-1)", "SBP(t)",
"CVD(t-1)", "CVD(t)",
"HDL(t-1)", "HDL(t)",
"HDL(t-1)", "LDL(t)",
"HDL(t-1)", "TRIG(t)",
"HDL(t)", "CVD(t)",
"HbA1c(t-1)", "HbA1c(t)",
"HbA1c(t)", "Nephropathy(t)",
"LDL(t-1)", "LDL(t)",
"LDL(t-1)", "HDL(t)",
"LDL(t)", "CVD(t)",
"Nephropathy(t-1)", "Nephropathy(t)",
"SBP(t-1)", "SBP(t)",
"SBP(t)", "CVD(t)",
"TRIG(t-1)", "TRIG(t)",
"TRIG(t-1)", "HDL(t)",
"TRIG(t)", "CVD(t)",
"Treatment(t-1)", "HbA1c(t)",
"Treatment(t)", "Nephropathy(t)",
"WHR(t-1)", "WHR(t)",
"WHR(t-1)", "BMI(t)",
"WHR(t-1)", "HDL(t)",
"WHR(t-1)", "TRIG(t)",
"HDL(0)", "CVD(0)",
"HbA1c(0)", "Nephropathy(0)",
"LDL(0)", "CVD(0)",
"SBP(0)", "CVD(0)",
"TRIG(0)", "CVD(0)",
"Treatment(0)", "Nephropathy(0)"
)
# Convert the list into a matrix with 2 columns ("From" and "To")
arcs_matrix <- matrix(arcs_list, ncol = 2, byrow = TRUE)
colnames(arcs_matrix) <- c("From", "To")
# Print the arcs matrix to verify
print(arcs_matrix)
#Empty DBN initialization
diabetes_management_dbn<-empty_DBN(dynamic_nodes = variables <- c(
"HDL",         # High-Density Lipoprotein Cholesterol
"LDL",         # Low-Density Lipoprotein Cholesterol
"TRIG",        # Triglycerides
"SBP",         # Systolic Blood Pressure
"BMI",         # Body Mass Index
"WHR",         # Waist-Hip Ratio
"HbA1c",       # Glycated Hemoglobin
"Nephropathy", # Kidney Disease Progression
"CVD",         # Cardiovascular Disease Status
"Treatment"    # Whether a patient is receiving treatment
), markov_order = 1)
# Function to add initial and transition edges to the DBN
parse_arc <- function(arc) {
parts <- strsplit(arc, "\\(|\\)")[[1]]
return(c(parts[1], ifelse(parts[2] == "0", "t_0", parts[2])))
}
# Add each arc to the DBN
for (i in 1:nrow(arcs_matrix)) {
from <- parse_arc(arcs_matrix[i, "From"])
to <- parse_arc(arcs_matrix[i, "To"])
diabetes_management_dbn <- add_arc_DBN(
DBN = diabetes_management_dbn,
from = from,
to = to
)
}
# Summary of the DBN
DBN_summary(diabetes_management_dbn)
# Summary of the DBN
summary_DBN(diabetes_management_dbn)
View(arcs_matrix)
plot_g0(diabetes_management_dbn)
plot_g0(diabetes_management_dbn)
plot_g_transition(diabetes_management_dbn)
# Generation of an object of class dbn.fit obtained by encoding the information from the EI-DBN
fitted_diabetes_management_dbn <- DynamicBayesianNetwork::DBN_parameters(diabetes_management_dbn, CPT_list)
fitted_diabetes_management_dbn
# A set of 10k time series of 5(+1) samples each are generated from the CPTs of the encoded EI-DBN
sample_data_diabetes <- dbn_sampling(fitted_diabetes_management_dbn, 10000, 5)
# Here the parameters are learned on the sample set given the structure encoded in the EI-DBN
learned_diabetes_management_cpts_from_fixed_structure <- DBN_parameters(DBN = diabetes_management_dbn, data = sample_data_diabetes)
# Here, instead, both the structure and the parameters of the network are learned from the sample set
# The structure is learned via Hill Climbing method, using Bayesian Information Criterion as local score
learned_diabetes_management_dbn <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic')
summary_DBN(learned_diabetes_management_dbn)
# The parameters are learned instead with a standard frequentist estimation, namely the Maximum Likelihood estimation
learned_diabetes_management_cpts <- DBN_parameters(DBN = learned_diabetes_management_dbn, data = sample_data_diabetes)
plot_g0(learned_diabetes_management_dbn)
plot_g_transition(learned_diabetes_management_dbn)
dbn_diabetes_unrolled <- get_unrolled_dbn(learned_diabetes_management_cpts, 4)
# Transforming the DBN into a standard BN by unrolling the network
dbn_diabetes_unrolled <- get_unrolled_dbn(learned_diabetes_management_cpts, 4)
# prediction: predicting Nephropathy probability at time 4 given low risk of WHR at time 3 and an administered treatment at the same time
cpquery(dbn_diabetes_unrolled, event = (Nephropathy_4 == "None"), evidence=((WHR_3 == "Low Risk") & (Treatment_3 == 'Yes')))
# smoothing: inferring past CVD
cpquery(dbn_diabetes_unrolled, event = (CVD_2 == "Present"), evidence=(CVD_3 == "Present"))
# filtering: inferring probability of CVD at time 4 given a low risk of
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=(CVD_3 == "Present"))
# filtering: inferring probability of CVD at time 4 given low LDL at the same time
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=(LDL_3 == "Present"))
# filtering: inferring probability of CVD at time 4 given low LDL at the same time
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=(LDL_3 == "Present"))
# filtering: inferring probability of CVD at time 4 given low LDL at the same time
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=(LDL_3 == "LOW"))
# filtering: inferring probability of CVD at time 4 given low LDL at the same time
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=(LDL_3 == "High"))
# Here, the structure is learned via PC stable method, using Mutual Information as conditional independence test
diabetes_management_dbn_PC <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'pc.stable', test='mi')
summary_DBN(learned_diabetes_management_dbn)
# The parameters are always learned via Maximum Likelihood estimation
diabetes_management_cpts_PC_ML <- DBN_parameters(DBN = learned_diabetes_management_dbn, data = sample_data_diabetes)
# Here, the structure is learned via PC stable method, using Mutual Information as conditional independence test
diabetes_management_dbn_PC <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'pc.stable', test='mi')
summary_DBN(diabetes_management_dbn_PC)
# The parameters are always learned via Maximum Likelihood estimation
diabetes_management_cpts_PC_ML <- DBN_parameters(DBN = learned_diabetes_management_dbn, data = sample_data_diabetes)
# Here, the structure is learned via Restricted Maximization method, using log-likelihood as a score for Tabu Search score-based method and Mutual Information as a conditional independence test for PC-stable method
diabetes_management_dbn_MMHC <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'rsmax2', algorithm.res = "pc.stable", algorithm.max = "tabu", score='loglik',test='mi')
summary_DBN(diabetes_management_dbn_MMHC)
# The parameters are always learned via Maximum Likelihood estimation
diabetes_management_cpts_MMHC_ML <- DBN_parameters(DBN = learned_diabetes_management_dbn, data = sample_data_diabetes)
# Here, the structure is learned as above, but a set of arcs are blacklisted, thus they are forbidden in the DBN, and another set is whitelisted, thus they are fixed in the network and could not be deleted
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=,whitelist=)
summary_DBN(diabetes_management_dbn_HC_prior)
# The parameters are always learned via Maximum Likelihood estimation
diabetes_management_cpts_HC_ML_prior <- DBN_parameters(DBN = learned_diabetes_management_dbn, data = sample_data_diabetes)
View(sample_data_diabetes)
# forecasting: inferring probability of CVD at time 4 given a high level of LDL at the same time
# definition of the current state for the entire set of variables in the DBN
current_state <- list(Time=c(0), HDL = c('Low'), LDL = c('Near Optimal'), TRIG = c('Normal'), SBP = c('Elevated'), BMI = c('Overweight'), WHR = c('Low Risk'), HbA1c = c('Normal'), Nephropathy = c('Early Stage'), CVD = c('None'), Treatment = c("Yes"))
# predict the next 4 states via forecasting function
dbn_forecasting(fitted_diabetes_management_dbn, current_state, 4)
# filtering: inferring probability of CVD at time 4 given a high level of LDL at the same time
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=((LDL_4 == "High") & (HDL_4 == "Low")))
library(gRain)
# Prediction via logic sampling: inferring Nephropathy probability at time 4 given low risk of WHR at time 3 and an administered treatment at the same time
cpquery(dbn_diabetes_unrolled, event = (Nephropathy_4 == "None"), evidence=((WHR_3 == "Low Risk") & (Treatment_3 == 'Yes')))
# Prediction  via likelihood weighting: inferring Nephropathy probability at time 4 given low risk of WHR at time 3 and an administered treatment at the same time
cpquery(dbn_diabetes_unrolled, event = (Nephropathy_4 == "None"), evidence=((WHR_3 == "Low Risk") & (Treatment_3 == 'Yes')),
method = "lw")
# Smoothing via likelihood weighting: inferring CVD risk at time 2 knowing that the patient has a CVD at time 3
cpquery(dbn_diabetes_unrolled, event = (CVD_2 == "Present"), evidence=(CVD_3 == "Present"),
method = "lw")
dbn_diabetes_unrolled
# Prediction  via likelihood weighting: inferring Nephropathy probability at time 4 given low risk of WHR at time 3 and an administered treatment at the same time
cpquery(dbn_diabetes_unrolled, event = (Nephropathy_4 == "None"), evidence=list(WHR_3 == "Low Risk",Treatment_3 == 'Yes'),
method = "lw")
# Prediction  via likelihood weighting: inferring Nephropathy probability at time 4 given low risk of WHR at time 3 and an administered treatment at the same time
cpquery(dbn_diabetes_unrolled, event = (Nephropathy_4 == "None"), evidence=list(WHR_3 = "Low Risk",Treatment_3 = 'Yes'),
method = "lw")
# Smoothing via likelihood weighting: inferring CVD risk at time 2 knowing that the patient has a CVD at time 3
cpquery(dbn_diabetes_unrolled, event = (CVD_2 == "Present"), evidence=list(CVD_3 = "Present"),
method = "lw")
# Filtering via logic sampling: inferring probability of CVD at time 4 given a high level of LDL and low level of HDL at the same time
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=((LDL_4 == "High") & (HDL_4 == "Low")))
# Filtering via likelihood weighting: inferring probability of CVD at time 4 given a high level of LDL and low level of HDL at the same time
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=list(LDL_4 == "High", HDL_4 == "Low"),
method = "lw")
# Filtering via likelihood weighting: inferring probability of CVD at time 4 given a high level of LDL and low level of HDL at the same time
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=list(LDL_4 = "High", HDL_4 = "Low"),
method = "lw")
View(sample_data_diabetes)
# Here, the structure is learned via PC stable method, using Mutual Information as conditional independence test
diabetes_management_dbn_PC <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'pc.stable', test='mi')
summary_DBN(diabetes_management_dbn_PC)
# The parameters are always learned via Maximum Likelihood estimation
diabetes_management_cpts_PC_ML <- DBN_parameters(DBN = diabetes_management_dbn_PC, data = sample_data_diabetes)
# Here, the structure is learned via Restricted Maximization method, using log-likelihood as a score for Tabu Search score-based method and Mutual Information as a conditional independence test for PC-stable method
diabetes_management_dbn_MMHC <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'rsmax2', algorithm.res = "pc.stable", algorithm.max = "tabu", score='loglik',test='mi')
summary_DBN(diabetes_management_dbn_MMHC)
# The parameters are always learned via Maximum Likelihood estimation
diabetes_management_cpts_MMHC_ML <- DBN_parameters(DBN = diabetes_management_dbn_MMHC, data = sample_data_diabetes)
bl_from <- c('CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t')
bl_to <- c('HDL_0','LDL_0','TRIG_0','SBP_0','BMI_0','WHR_0','HbA1c_0','Treatment_0','HDL_t','LDL_t','TRIG_t','SBP_t','BMI_t','WHR_t','HbA1c_t','Treatment_t')
blacklist_set <- matrix(c(bl_from,bl_to), nrow = 2, byrow = TRUE)
View(blacklist_set)
blacklist_set <- matrix(c(bl_from,bl_to), ncol = 2, byrow = TRUE)
blacklist_set <- matrix(c(bl_from,bl_to), ncol = 2, byrow = FALSE)
# Here, the structure is learned as above, but a set of arcs are blacklisted, thus they are forbidden in the DBN, and another set is whitelisted, thus they are fixed in the network and could not be deleted
# Define the set of forbidden arcs: CVD could not be parent of any other variable
bl_from <- c('CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t')
bl_to <- c('HDL_0','LDL_0','TRIG_0','SBP_0','BMI_0','WHR_0','HbA1c_0','Treatment_0','HDL_t','LDL_t','TRIG_t','SBP_t','BMI_t','WHR_t','HbA1c_t','Treatment_t')
blacklist_set <- matrix(c(bl_from,bl_to), ncol = 2, byrow = FALSE)
# Define the set of fixed arcs; CVD is a children of HDL and LDL both at time 0 and at time t
wl_from <- c('HDL_0','LDL_0','HDL_t','LDL_t')
wl_to <- c('CVD_0','CVD_0','CVD_t','CVD_t')
whitelist_set <- matrix(c(wl_from,wl_to), ncol = 2, byrow = FALSE)
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
# Here, the structure is learned as above, but a set of arcs are blacklisted, thus they are forbidden in the DBN, and another set is whitelisted, thus they are fixed in the network and could not be deleted
# Define the set of forbidden arcs: CVD could not be parent of any other variable
bl_from <- c('CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t')
bl_to <- c('HDL_0','LDL_0','TRIG_0','SBP_0','BMI_0','WHR_0','HbA1c_0','Treatment_0','HDL_t','LDL_t','TRIG_t','SBP_t','BMI_t','WHR_t','HbA1c_t','Treatment_t')
blacklist_set <- matrix(c(bl_from,bl_to), ncol = 2, byrow = FALSE)
colnames(blacklist_set) <- c('from','to')
# Define the set of fixed arcs; CVD is a children of HDL and LDL both at time 0 and at time t
wl_from <- c('HDL_0','LDL_0','HDL_t','LDL_t')
wl_to <- c('CVD_0','CVD_0','CVD_t','CVD_t')
whitelist_set <- matrix(c(wl_from,wl_to), ncol = 2, byrow = FALSE)
colnames(whitelist_set) <- c('from','to')
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
whitelist_set
blacklist_set
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
View(blacklist_set)
View(whitelist_set)
!(setequal(def_lev[[c]], defined_levels[[c]]))
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
!colnames(blacklist) == c("from", "to"))
colnames(blacklist_set) == c("from", "to"))
colnames(blacklist_set) == c("from", "to")
all(colnames(blacklist_set) == c("from", "to"))
library(DynamicBayesianNetwork)
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
!all(grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),bl[,'to']) == grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),blacklist_set))
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),bl[,'to']) == grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),blacklist_set)
paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = '')
paste('^(',paste(setdiff(names(data), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = '')
paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = '')
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),blacklist_set)
blacklist_set
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),bl[,'to'])
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),bl[,'from'])
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),blacklist_set[,'from'])
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),blacklist_set[,'to'])
library(DynamicBayesianNetwork)
bl_from <- c('CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t')
bl_to <- c('HDL_0','LDL_0','TRIG_0','SBP_0','BMI_0','WHR_0','HbA1c_0','Treatment_0','HDL_t','LDL_t','TRIG_t','SBP_t','BMI_t','WHR_t','HbA1c_t','Treatment_t')
blacklist_set <- matrix(c(bl_from,bl_to), ncol = 2, byrow = FALSE)
colnames(blacklist_set) <- c('from','to')
# Define the set of fixed arcs; CVD is a children of HDL and LDL both at time 0 and at time t
wl_from <- c('HDL_0','LDL_0','HDL_t','LDL_t')
wl_to <- c('CVD_0','CVD_0','CVD_t','CVD_t')
whitelist_set <- matrix(c(wl_from,wl_to), ncol = 2, byrow = FALSE)
colnames(whitelist_set) <- c('from','to')
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_(t|t-1)$',sep = ''),blacklist_set[,'from'])
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_(t|t-1)$',sep = ''),blacklist_set[,'to'])
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_(t)$',sep = ''),blacklist_set[,'to'])
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_(t)$',sep = ''),blacklist_set[,'to'])
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),blacklist_set[,'to'])
grepl(paste('^(',paste(setdiff(names(sample_data_diabetes), c("Time", "Sample_id")), collapse = "|"),')_0$',sep = ''),blacklist_set[,'from'])
library(DynamicBayesianNetwork)
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
library(DynamicBayesianNetwork)
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
library(DynamicBayesianNetwork)
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
# Here, the structure is learned as above, but a set of arcs are blacklisted, thus they are forbidden in the DBN, and another set is whitelisted, thus they are fixed in the network and could not be deleted
# Define the set of forbidden arcs: CVD could not be parent of any other variable
bl_from <- c('CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_0','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t','CVD_t')
bl_to <- c('HDL_0','LDL_0','TRIG_0','SBP_0','BMI_0','WHR_0','HbA1c_0','Treatment_0','HDL_t','LDL_t','TRIG_t','SBP_t','BMI_t','WHR_t','HbA1c_t','Treatment_t')
blacklist_set <- matrix(c(bl_from,bl_to), ncol = 2, byrow = FALSE)
colnames(blacklist_set) <- c('from','to')
# Define the set of fixed arcs; CVD is a children of HDL and LDL both at time 0 and at time t
wl_from <- c('HDL_0','LDL_0','HDL_t','LDL_t')
wl_to <- c('CVD_0','CVD_0','CVD_t','CVD_t')
whitelist_set <- matrix(c(wl_from,wl_to), ncol = 2, byrow = FALSE)
colnames(whitelist_set) <- c('from','to')
diabetes_management_dbn_HC_prior <- DynamicBayesianNetwork::StructureLearning.Network(data = sample_data_diabetes, algorithm = 'hc', score='bic',blacklist=blacklist_set,whitelist=whitelist_set)
summary_DBN(diabetes_management_dbn_HC_prior)
# The parameters are always learned via Maximum Likelihood estimation
diabetes_management_cpts_HC_ML_prior <- DBN_parameters(DBN = diabetes_management_dbn_HC_prior, data = sample_data_diabetes)
write.csv2(sample_data_diabetes, file = "diabetes_data.csv")
library(readr)
diabetes_data <- read_delim("data/diabetes_data.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(diabetes_data)
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=)
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=None)
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=NaN)
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=NaN)
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"))
cpquery(dbn_diabetes_unrolled, (CVD_4 == "Present"))
library(zeallot)
library(gRain)
library(gRain)
library(DynamicBayesianNetwork)
cpquery(dbn_diabetes_unrolled, (CVD_4 == "Present"))
bnlearn::cpquery(dbn_diabetes_unrolled, (CVD_4 == "Present"))
bnlearn::cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence = ())
querygrain(dbn_diabetes_unrolled, CVD_4)
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=list(),
method = "lw")
bnlearn::cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=list(),
method = "lw")
bnlearn::cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence =TRUE)
bnlearn::cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence =TRUE)
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=((HDL_4 == "Low")))
cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=(HDL_4 == "Low"))
bnlearn::cpquery(dbn_diabetes_unrolled, event = (CVD_4 == "Present"), evidence=(HDL_4 == "Low"))
